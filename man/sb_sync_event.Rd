% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/export.R
\name{sb_sync_event}
\alias{sb_sync_event}
\title{Export modified event data since the last synchronisation time}
\usage{
sb_sync_event(
  form,
  last_sync_time,
  url,
  username,
  password,
  ...,
  filter = sb_sync_event_filter(),
  option = sb_sync_event_option()
)
}
\arguments{
\item{form}{Name of Smartabase event form}

\item{last_sync_time}{UNIX time (time in milliseconds since 1970-01-01) as
an integer}

\item{url}{Smartabase url e.g. "example.smartabase.com/site"}

\item{username}{Smartabase username}

\item{password}{Smartabase password}

\item{...}{These dots are for future extensions and must be empty}

\item{filter}{More filters accessible via \code{\link[=sb_sync_event_filter]{sb_sync_event_filter()}} object}

\item{option}{More options accessible via \code{\link[=sb_sync_event_option]{sb_sync_event_option()}} object}
}
\value{
A tibble containing Smartabase event data
}
\description{
\code{sb_sync_event()} exports data from a Smartabase event form using the
Smartabase API. The user must supply a timestamp in unix format (i.e.
milliseconds since 1970-01-01) and \code{sb_sync_event()} will return event data
that has been inserted or updated since that time.

\code{sb_sync_event()} also attaches a \code{new_sync_time} attribute to the returned
tibble. This attribute can then be stripped from the tibble and fed into a
subsequent call of \code{sb_sync_event()} via the \code{last_sync_time} argument.
}
\details{
A common use case for \code{smartabaseR} is to help automate certain data
wrangling and/or modelling tasks in Smartabase. By running \code{sb_sync_event()}
on a schedule (i.e. a 15 minute cron job), we can write logic that only
triggers when newly modified event data is discovered. The idea is to take
the \code{new_sync_time} value returned from \code{sb_sync_event()} and feed it back
into a subsequent call of \code{sb_sync_event()} via the \code{last_sync_time}
argument.
}
\section{Filters}{

There are also a range extra filters than can be supplied to the \code{filter}
argument. In order to reduce argument clutter in \code{sb_sync_event()}, all
optional filters must be generated by the
\code{\link[=sb_sync_event_filter]{sb_sync_event_filter()}} function. Please see \code{\link[=sb_sync_event_filter]{sb_sync_event_filter()}}
for more details.
}

\section{Options}{

There are also a range extra options than can be supplied to the \code{option}
argument. In order to reduce argument clutter in \code{sb_sync_event()}, all
options must be generated by the \code{\link[=sb_sync_event_option]{sb_sync_event_option()}} function. Please
see \code{\link[=sb_sync_event_option]{sb_sync_event_option()}} for more details.
}

\examples{
\dontrun{
# Get any wellness data that has been modified since Jan 01 2023
(1672531200000):
new_wellness_data <- sb_sync_event(
  form = "Daily Wellness",
  last_sync_time = 1672531200000,
  url = "example.smartabase.com/site",
  username = "example.user",
  password = "examplePassword"
)
}

}
\seealso{
\code{\link[=sb_get_profile]{sb_get_profile()}} for profile data.
\code{\link[=sb_get_user]{sb_get_user()}} for user data.
\code{\link[=sb_sync_event]{sb_sync_event()}} to synchronise with an event form.

Other export functions: 
\code{\link{sb_get_event}()},
\code{\link{sb_get_profile}()},
\code{\link{sb_get_user}()}
}
\concept{export functions}
